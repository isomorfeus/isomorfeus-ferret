segments ->
  UInt64 gen0
  UInt64 gen1

segments_(gen) ->
  UInt32 Format         # hard coded number depending in Ferret version
  UInt64 Version        # incremented with every index change. Used to detect latest index
  UInt64 NameCounter    # used to get the name of the next segment. Names are _<base 32 integer>
  # SegmentInfos
  VInt   SegCount       # number of segments
  {
    String SegName
    VInt   DocCount     # number of documents in this segment
    VInt   DelGen
    VInt   NormGensSize
    {
      VInt NormGens
    } * NormGensSize
    Byte UseCompoundFile
  } * SegCount
  # FieldInfos
  VInt Bits             # as below
  VInt NumFields
  {
    String FieldName
    UInt32 Boost
    VInt   Bits
    <
      0x001 => store fields
      0x002 => compress fields
      0x004 => index fields
      0x008 => tokenize fields
      0x010 => omit norms
      0x020 => store term vector
      0x040 => store positions
      0x080 => store offsets
      0x100 => brotli compression
      0x200 => bzip2 compression
      0x400 => lz4 compression
    > FieldBits
  } * NumFields

Compound(.cfs) ->
  VInt FileCount
  {
    UInt64 DataOffset
    String FileName
  } * FileCount
  {
    Chars FileData
  } * FileCount

FieldIndex(.fdx) ->   # FIELDS_IDX_PTR_SIZE is 12, lookup of docs is doc_num * FIELDS_IDX_PTR_SIZE
  {
    UInt64 FieldPosition => to .fdt FieldNum
    UInt32 TermVectorOffset
  } * SegSize

FieldData(.fdt) ->
  {
    VInt FieldCount # stored field count
    {
      VInt   FieldNum
      Vint   FieldSize # Array size if field is a array of strings
      VInt   FieldLen # compressed or uncompressed
      VInt   FieldEncoding
      VInt   FieldCompressionCodec # the actual codec the field has been stored with
    } * FieldCount
    {
      Bytes FieldData
    } * FieldCount # TODO store field data somewhere else
    [{
      VInt PostingsCount # NumTerms
      {
        VInt PostingDeltaStart
        VInt PostingDeltaLength
        Bytes PostingTerm # TODO length cuts off utf8 expanded term
        VInt PostingFreq
        [{
          VInt Pos
        } * occ] if store_positions
      } * PostingsCount
      [
        VInt OffsetCount # NumPositions
        {
          Vll Start
          Vll End
        } * OffsetCount] if store_offsets
    } * FieldCount] if store_term_vector
    VInt TVCount
    {
      VInt   FieldNum
      VInt   FieldLen # TermVectorSize
    }
  } * SegSize

Norms(.[s|f]#field_num) ->
  Bytes Norms

TermInfoFile(.tis) ->
  UInt32 IndexInterval
  UInt32 SkipInterval
  TermInfo {
    VInt   PrefixLength
    String Suffix
    VInt   FieldNum
    VInt   DocFreq
    VLong  FreqDelta
    VLong  ProxDelta
    VLong  SkipDelta
  } * TermCount

(.tix) ->
  {
    {
      VInt  SharedPrefixLength / Start
      VInt  DeltaLength / Length
      Bytes DeltaChars / Term
      VInt  DocFreq
      VOffT FreqPtr
      VOffT ProxPtr
      [VOffT TisPos]
    } * PostingsCount
  } * FieldCount

(.tfx) ->
  UInt32 FieldCount
  VInt   IndexInterval / Tix
  Vint   SkipInterval / Tis
  {
    VInt  FieldNum
    VOffT TixPos
    VOffT TisPos
    VInt  TixCount
    VInt  TisSize
  } * FieldCount

FreqFile(.frq) ->
  {
    TermFreqs {
      TermFreq {
        VInt DocDelta / DocCode ?
        VInt Freq?
      }
    } * DocFreq
    SkipData {
      VInt DocSkip / SkipDoc
      VInt FreqSkip / FreqPos
      VInt ProxSkip / ProxPos
    } * DocFreq/SkipInterval
  } * TermCount

(.prx) ->
  {
    {
      {
        VInt Pos
      } * OccCount
    } * PostingsCount
  } * FieldCOunt

(.del) -> # Keeps Bitvector of deleted docs
  VInt BVSize
  {
    UInt32 Bits
  } * BVSize